}
#Simulate model
out <- ode(y = InitialConditions,
times = times,
func = growth.collapse.pruyt,
parms = parameters,
method =intg.method )
plot(out)
q()
# Limpiamos ambiente de trabajo
rm(list=ls())
# Cargamos bibliotecas
library(deSolve)
# Arreglo de parámetros
parameters<-c(beta = 0.01 , alpha = 0.02 , d = 5, c = 4.8 , gamma = 0.01, nu = 3)
# Arreglo de condiciones iniciales
InitialConditions <- c(L = 300, w = 0.95 , a = 1, N = 300)
# Arreglo del intervalo de tiempo
init <- 0
final <- 100
time_step <- 1/4
times <- seq(init,final,time_step)
# Método de integración
intg.method<-c("rk4")
# Definimos el modelo a resolver
model <- function(t, state, parameters) {
with(as.list(c(state,parameters)), {
#auxiliary endogenous variables
#flow variables
Y = a*L
K = Y/nu
Pi = Y - (w * L)
I = Pi
lambda = L/N
#state variables
dL <-  L * (((1-(w/a))/nu) - gamma - alpha )
dw <- (-c + (d * lambda)) * w
da <- alpha * a
dN <- beta * N
list(c(dL,dw,da,dN), Pi = Pi, Y = Y)
})
}
# Simulate model
out <- ode(y = InitialConditions, # y recibe las condiciones iniciales
times = times, # times recibe el arreglo del intervalo de tiempo
func = model, # func recibe el modelo a resolver
parms = parameters,  # parms recibe los parámetros del modelo
method = intg.method  # method recibe el método de integración
)
out
plot(out)
library(ggplot2)
install.packages("ggplot2")
out <- data.frame(out)
out$wage_share <- (out$w * out$L)/out$Y
out$employment_rate <- out$L / out$N
install.packages("ggplot2")
library(ggplot2)
ggplot(out, aes( x = wage_share, y = employment_rate))+
geom_point() +
geom_path(aes(colour = time), arrow = arrow())
# Arreglo del intervalo de tiempo
init <- 0
final <- 4.5
time_step <- 1/4
times <- seq(init,final,time_step)
# Método de integración
intg.method<-c("rk4")
# Definimos el modelo a resolver
model <- function(t, state, parameters) {
with(as.list(c(state,parameters)), {
#auxiliary endogenous variables
#flow variables
Y = a*L
K = Y/nu
Pi = Y - (w * L)
I = Pi
lambda = L/N
#state variables
dL <-  L * (((1-(w/a))/nu) - gamma - alpha )
dw <- (-c + (d * lambda)) * w
da <- alpha * a
dN <- beta * N
list(c(dL,dw,da,dN), Pi = Pi, Y = Y)
})
}
# Simulate model
out <- ode(y = InitialConditions, # y recibe las condiciones iniciales
times = times, # times recibe el arreglo del intervalo de tiempo
func = model, # func recibe el modelo a resolver
parms = parameters,  # parms recibe los parámetros del modelo
method = intg.method  # method recibe el método de integración
)
# Visualizamos los resultados
plot(out)
#
out <- data.frame(out)
out$wage_share <- (out$w * out$L)/out$Y
out$employment_rate <- out$L / out$N
ggplot(out, aes( x = wage_share, y = employment_rate))+
geom_point() +
geom_path(aes(colour = time), arrow = arrow())
ggplot(out, aes( x = wage_share, y = employment_rate))+
geom_point() +
geom_path(aes(colour = time), arrow = arrow())
# Limpiamos ambiente de trabajo
rm(list=ls())
# Cargamos bibliotecas
library(deSolve)
# Arreglo de parámetros
parameters<-c(beta = 0.01 , alpha = 0.02 , d = 5, c = 4.8 , gamma = 0.01, nu = 3, r = 0.05)
# Arreglo de condiciones iniciales
InitialConditions <- c(Y = 300,w = 0.95 ,D = 0, a = 1, N = 300)
# Arreglo del intervalo de tiempo
init <- 0
final <- 100
time_step <- 1/4
times <- seq(init,final,time_step)
# Método de integración
intg.method<-c("rk4")
GenExp <- function(x, x_val, y_val, s, min){
return((y_val - min) * exp((s/(y_val-min))*(x-x_val)) + min)
}
# Definimos el modelo a resolver
model <- function(t, state, parameters) {
with(as.list(c(state,parameters)), {
#auxiliary endogenous variables
#flow variables
L = Y/a
K = Y/nu
Pi = Y * (w*L) - (r*D)
lambda = L/N
PC = GenExp(lambda, 0.95, 0, 0.5, -0.01)
I = GenExp(Pi,0.05,0.05,1.75,0)
#state variables
dY = ((I/nu) * gamma) * Y
dw = PC * w
dD = I - Pi
da = alpha * a
dN = beta * N
list(c(dY,dw,dD,da,dN),Pi= Pi, L = L, K = K)
})
}
out <- ode(y = InitialConditions, # y recibe las condiciones iniciales
times = times, # times recibe el arreglo del intervalo de tiempo
func = model, # func recibe el modelo a resolver
parms = parameters,  # parms recibe los parámetros del modelo
method = intg.method  # method recibe el método de integración
)
ode
out
plot(out)
# Limpiamos ambiente de trabajo
rm(list=ls())
# Cargamos bibliotecas
library(deSolve)
# Arreglo de parámetros
parameters<-c(beta = 0.01 , alpha = 0.02 , d = 5, c = 4.8 , gamma = 0.01, nu = 3, r = 0.05)
# Arreglo de condiciones iniciales
InitialConditions <- c(Y = 300,w = 0.95 ,D = 0, a = 1, N = 300)
# Arreglo del intervalo de tiempo
init <- 0
final <- 100
time_step <- 1/4
times <- seq(init,final,time_step)
# Método de integración
intg.method<-c("rk4")
GenExp <- function(x, x_val, y_val, s, min){
return((y_val - min) * exp((s/(y_val-min))*(x-x_val)) + min)
}
# Definimos el modelo a resolver
model <- function(t, state, parameters) {
with(as.list(c(state,parameters)), {
#auxiliary endogenous variables
#flow variables
L = Y/a
K = Y/nu
Pi = Y * (w*L) - (r*D)
lambda = L/N
PC = GenExp(lambda, 0.95, 0, 0.5, -0.01)
I = GenExp(Pi/(ν*Y),0.05,0.05,1.75,0)
#state variables
dY = ((I/nu) * gamma) * Y
dw = PC * w
dD = I - Pi
da = alpha * a
dN = beta * N
list(c(dY,dw,dD,da,dN),Pi= Pi, L = L, K = K)
})
}
# Simulate model
out <- ode(y = InitialConditions, # y recibe las condiciones iniciales
times = times, # times recibe el arreglo del intervalo de tiempo
func = model, # func recibe el modelo a resolver
parms = parameters,  # parms recibe los parámetros del modelo
method = intg.method  # method recibe el método de integración
)
# Limpiamos ambiente de trabajo
rm(list=ls())
# Cargamos bibliotecas
library(deSolve)
# Arreglo de parámetros
parameters<-c(beta = 0.01 , alpha = 0.02 , d = 5, c = 4.8 , gamma = 0.01, nu = 3, r = 0.05)
# Arreglo de condiciones iniciales
InitialConditions <- c(Y = 300,w = 0.95 ,D = 0, a = 1, N = 300)
# Arreglo del intervalo de tiempo
init <- 0
final <- 100
time_step <- 1/4
times <- seq(init,final,time_step)
# Método de integración
intg.method<-c("rk4")
GenExp <- function(x, x_val, y_val, s, min){
return((y_val - min) * exp((s/(y_val-min))*(x-x_val)) + min)
}
# Definimos el modelo a resolver
model <- function(t, state, parameters) {
with(as.list(c(state,parameters)), {
#auxiliary endogenous variables
#flow variables
L = Y/a
K = Y/nu
Pi = Y * (w*L) - (r*D)
lambda = L/N
PC = GenExp(lambda, 0.95, 0, 0.5, -0.01)
I = GenExp(Pi/(nu*Y),0.05,0.05,1.75,0)
#state variables
dY = ((I/nu) * gamma) * Y
dw = PC * w
dD = I - Pi
da = alpha * a
dN = beta * N
list(c(dY,dw,dD,da,dN),Pi= Pi, L = L, K = K)
})
}
# Simulate model
out <- ode(y = InitialConditions, # y recibe las condiciones iniciales
times = times, # times recibe el arreglo del intervalo de tiempo
func = model, # func recibe el modelo a resolver
parms = parameters,  # parms recibe los parámetros del modelo
method = intg.method  # method recibe el método de integración
)
out
# Limpiamos ambiente de trabajo
rm(list=ls())
# Cargamos bibliotecas
library(deSolve)
# Arreglo de parámetros
parameters<-c(α = 0.02,β = 0.01,c = 4.8,d = 5,γ = 0.01,ν = 3,r = 0.05)
# Arreglo de condiciones iniciales
InitialConditions <- c(Y =300,
D = 0,
w = 0.95,
a = 1,
N = 300)
# Arreglo del intervalo de tiempo
init <- 0
final <- 100
time_step <- 1/4
times <- seq(init,final,time_step)
# Método de integración
intg.method<-c("rk4")
# Definimos la función no lineal
GenExp <- function(x,x_val,y_val,s,min){
return ( (y_val - min) * exp( (s/(y_val - min))*(x - x_val)) + min)
}
# Definimos el modelo a resolver
model <- function(t, state, parameters) {
with(as.list(c(state,parameters)), {
#flow variables
L = Y/a
K = (1/ν) * Y
ganancias  = Y - w*L - r*D
λ = L/N
PC = GenExp(λ,0.95,0,0.5,-0.01)
I = GenExp(ganancias/(ν*Y),0.05,0.05,1.75,0)
# state variables
dY = ((I/ν) - γ ) * Y
dD = I * Y - ganancias
dw = PC*w
da = α*a
dN = β*N
list(c(dY,dD,dw,da,dN),ganancias = ganancias,L = L,K = K)
})
}
# Simulate model
out <- ode(y = InitialConditions, # y recibe las condiciones iniciales
times = times, # times recibe el arreglo del intervalo de tiempo
func = model, # func recibe el modelo a resolver
parms = parameters,  # parms recibe los parámetros del modelo
method = intg.method  # method recibe el método de integración
)
out
plot(out)
# Visualizamos los resultados
out <- data.frame(out)
out$wage_share <- (out$w* out$L) / out$Y
out$employment_rate <- out$L  / out$N
out$debt_to_output_ratio <- out$D / out$Y
install.packages("plotly")
#install.packages("plotly")
library(plotly)
fig <- plot_ly(out, x = ~wage_share, y = ~employment_rate, z = ~debt_to_output_ratio, type = 'scatter3d', mode = 'lines',
line = list(width = 4, color = ~time, colorscale = list(c(0,'#BA52ED'), c(1,'#FCB040')) , showscale = TRUE))
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Wage share'),
yaxis = list(title = 'Employment rate'),
zaxis = list(title = 'Debt to output')))
fig
q()
rm(list=ls())
library(move)
library(tidyr)
# Set credential
loginStored <- movebankLogin(username="milocg", password="%Move123")
gallopavo_all <- getMovebankData(study="Eastern Wild Turkey_Margadant", login=loginStored)
gallopavo_all
# Get track GPS data
gallopavo <- getMovebankLocationData(study="Eastern Wild Turkey_Margadant" , sensorID="GPS", login=loginStored,removeDuplicatedTimestamps=TRUE)
# Remove NAN
gallopavo <- gallopavo %>% drop_na()
library(ctmm)
# Convertimos estos datos en un objeto MoveStack ya que incluye a varios individuos
gallo_move <- move(x=gallopavo$location.long, y=gallopavo$location.lat,
time=as.POSIXct(gallopavo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC"),
proj=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84"),
data=gallopavo, animal=gallopavo$individual.local.identifier)
gallo_tel <- as.telemetry(gallo_move)
# 3.5 Con lo siguiente podemos hacer un plot de todos los individuos.
plot(gallo_tel, col=rainbow(length(gallo_tel)))
animal <- gallo_tel$Sky_462
print(paste0("Ejecución para el animal ",animal@info$identity))
print("Estimamos el modelo sin considerar la autocorrelacion")
M.IID <- ctmm.fit(animal)
print("Estimamos automaticamente los mejores parametros para el modelo utilizando ctmm.guess")
m.ouf <- ctmm.guess(animal,interactive=FALSE)
print("Seleccionamos mejor modelo de acuerdo al AIC")
M.OUF <- ctmm.fit(animal, m.ouf_gallo)
print("Estimamos el akde del modelo iid")
UD0 <- akde(animal,M.IID)
print("Estimamos el mejor modelo sin el método de pesos optimos (optimal weighting)")
UD2 <- akde(animal,M.OUF)
print("Estimamos el mejor modelo pero utilizando el método de pesos optimos (optimal weighting)")
UD2w <- akde(animal,M.OUF, weights=TRUE)
# calculate one extent for all UDs
EXT <- extent(list(UD0,UD2,UD2w),level=0.95)
print(paste0("Ejecución para el animal ",animal@info$identity))
M.IID <- ctmm.fit(animal)
m.ouf <- ctmm.guess(animal,interactive=FALSE)
M.OUF <- ctmm.fit(animal, m.ouf)
UD0 <- akde(animal,M.IID)
UD2 <- akde(animal,M.OUF)
UD2w <- akde(animal,M.OUF, weights=TRUE)
EXT <- extent(list(UD0,UD2,UD2w),level=0.95)
plot(animal,UD=UD0,xlim=EXT$x,ylim=EXT$y)
plot(animal,UD=UD0,xlim=EXT$x,ylim=EXT$y)
title(expression(paste0("IID KDE-",animal@info$identity)))
getwd()
setEPS()
print("Creamos plot IID AKDE")
postscript(paste0("iid_kde_",animal@info$identity,".eps"))
plot(animal,UD=UD0,xlim=EXT$x,ylim=EXT$y)
title(expression(paste0("IID KDE-",animal@info$identity)))
dev.off()
cairo_ps()
cairo_ps(file = paste0("iid_kde_",animal@info$identity,".eps"),onefile = FALSE,fallback_resolution=600)
plot(animal,UD=UD0,xlim=EXT$x,ylim=EXT$y)
title(expression(paste0("IID KDE-",animal@info$identity)))
dev.off()
paste0("IID KDE-",animal@info$identity)
cairo_ps(file = paste0("iid_kde_",animal@info$identity,".eps"),onefile = FALSE,fallback_resolution=1600)
plot(animal,UD=UD0,xlim=EXT$x,ylim=EXT$y)
title(expression(paste0("IID KDE-",animal@info$identity)))
dev.off()
cairo_ps(file = paste0("iid_kde_",animal@info$identity,".eps"),onefile = FALSE,fallback_resolution=1600)
cairo_ps(file = paste0("iid_kde_",animal@info$identity,".eps"),onefile = FALSE)
plot(animal,UD=UD0,xlim=EXT$x,ylim=EXT$y)
title(expression(paste0("IID KDE-",animal@info$identity)))
dev.off()
cairo_ps(file = paste0("iid_kde_",animal@info$identity,".eps"),onefile = FALSE)
titulo =  paste0("iid_kde_",animal@info$identity,".eps")
titulo
plot(animal,UD=UD0,xlim=EXT$x,ylim=EXT$y)
title(expression(titulo))
dev.off()
cairo_ps(file = paste0("iid_kde_",animal@info$identity,".eps"),onefile = FALSE)
plot(animal,UD=UD0,xlim=EXT$x,ylim=EXT$y)
title(titulo)
dev.off()
build_akde <- function(animal){
print(paste0("Ejecución para el animal ",animal@info$identity))
print("Estimamos el modelo sin considerar la autocorrelacion")
M.IID <- ctmm.fit(animal)
print("Estimamos automaticamente los mejores parametros para el modelo utilizando ctmm.guess")
m.ouf <- ctmm.guess(animal,interactive=FALSE)
print("Seleccionamos mejor modelo de acuerdo al AIC")
M.OUF <- ctmm.fit(animal, m.ouf)
print("Estimamos el akde del modelo iid")
UD0 <- akde(animal,M.IID)
print("Estimamos el mejor modelo sin el método de pesos optimos (optimal weighting)")
UD2 <- akde(animal,M.OUF)
print("Estimamos el mejor modelo pero utilizando el método de pesos optimos (optimal weighting)")
UD2w <- akde(animal,M.OUF, weights=TRUE)
# calculate one extent for all UDs
EXT <- extent(list(UD0,UD2,UD2w),level=0.95)
setwd("/home/milo/PCIC/Maestría/4toSemestre/ecol_mov/proyecto/output/akde/plots")
print("Creamos plot IID AKDE")
cairo_ps(file = paste0("iid_kde_",animal@info$identity,".eps"),onefile = FALSE,fallback_resolution=600)
plot(animal,UD=UD0,xlim=EXT$x,ylim=EXT$y)
title(paste0("IID KDE-",animal@info$identity))
dev.off()
print("Creamos plot con UD del OUF AKDE")
cairo_ps(file = paste0("ouf_kde_",animal@info$identity,".eps"),onefile = FALSE,fallback_resolution=600)
plot(animal,UD=UD2,xlim=EXT$x,ylim=EXT$y)
title(paste0("OUF AKDE",animal@info$identity))
dev.off()
print("Creamos plot con UD del weighted OUF AKDE")
cairo_ps(file = paste0("w_ouf_kde_",animal@info$identity,".eps"),onefile = FALSE,fallback_resolution=600)
plot(animal,UD=UD2w,xlim=EXT$x,ylim=EXT$y)
title(paste0("weighted OUF AKDE",animal@info$identity))
dev.off()
#print("Exportamos el shapefile del área de actividad calculada con el método M.OUF con pesos optimos")
#setwd("/home/milo/PCIC/Maestría/4toSemestre/ecol_mov/proyecto/output/akde/shp")
#writeShapefile(UD2w_gallo,paste0("akde_",gallo@info$identity,"_") , overwrite = TRUE)
setwd("/home/milo/PCIC/Maestría/4toSemestre/ecol_mov/proyecto/output/akde/raster")
print("Creamos el raster con IID AKDE")
animal_ud0 <-raster(UD0)
writeRaster(animal_ud0, filename=paste0("iid_kde_",animal@info$identity,".tif"), overwrite=TRUE)
print("Creamos el raster con UD del OUF AKDE")
animal_ud2 <-raster(UD2)
writeRaster(animal_ud2, filename=paste0("ouf_kde_",animal@info$identity,".tif"), overwrite=TRUE)
print("Creamos el raster con UD del weighted OUF AKDE")
animal_ud2w <-raster(UD2w)
writeRaster(animal_ud2w, filename=paste0("w_ouf_kde_",animal@info$identity,".tif"), overwrite=TRUE)
}
build_akde(animal)
print(paste0("Ejecución para el animal ",animal@info$identity))
print("Estimamos el modelo sin considerar la autocorrelacion")
M.IID <- ctmm.fit(animal)
print("Estimamos automaticamente los mejores parametros para el modelo utilizando ctmm.guess")
m.ouf <- ctmm.guess(animal,interactive=FALSE)
print("Seleccionamos mejor modelo de acuerdo al AIC")
M.OUF <- ctmm.fit(animal, m.ouf)
print("Estimamos el akde del modelo iid")
UD0 <- akde(animal,M.IID)
print("Estimamos el mejor modelo sin el método de pesos optimos (optimal weighting)")
UD2 <- akde(animal,M.OUF)
print("Estimamos el mejor modelo pero utilizando el método de pesos optimos (optimal weighting)")
UD2w <- akde(animal,M.OUF, weights=TRUE)
# calculate one extent for all UDs
EXT <- extent(list(UD0,UD2,UD2w),level=0.95)
UD2
UD2$DOF.area
UD2$r
class(UD2$r)
plot(UD2)
plot(UD2w)
summary(UD2w)
View(UD2)
UD2w$H
UD2w$r$x
plot(UD2w)
build_akde <- function(animal){
print(paste0("Ejecución para el animal ",animal@info$identity))
print("Estimamos el modelo sin considerar la autocorrelacion")
M.IID <- ctmm.fit(animal)
print("Estimamos automaticamente los mejores parametros para el modelo utilizando ctmm.guess")
m.ouf <- ctmm.guess(animal,interactive=FALSE)
print("Seleccionamos mejor modelo de acuerdo al AIC")
M.OUF <- ctmm.fit(animal, m.ouf)
print("Estimamos el akde del modelo iid")
UD0 <- akde(animal,M.IID)
print("Estimamos el mejor modelo sin el método de pesos optimos (optimal weighting)")
UD2 <- akde(animal,M.OUF)
print("Estimamos el mejor modelo pero utilizando el método de pesos optimos (optimal weighting)")
UD2w <- akde(animal,M.OUF, weights=TRUE)
# calculate one extent for all UDs
EXT <- extent(list(UD0,UD2,UD2w),level=0.95)
setwd("/home/milo/PCIC/Maestría/4toSemestre/ecol_mov/proyecto/output/akde/plots")
print("Creamos plot IID AKDE")
cairo_ps(file = paste0("iid_kde_",animal@info$identity,".eps"),onefile = FALSE,fallback_resolution=600)
plot(animal,UD=UD0,xlim=EXT$x,ylim=EXT$y)
title(paste0("IID KDE-",animal@info$identity))
dev.off()
print("Creamos plot con UD del OUF AKDE")
cairo_ps(file = paste0("ouf_kde_",animal@info$identity,".eps"),onefile = FALSE,fallback_resolution=600)
plot(animal,UD=UD2,xlim=EXT$x,ylim=EXT$y)
title(paste0("OUF AKDE-",animal@info$identity))
dev.off()
print("Creamos plot con UD del weighted OUF AKDE")
cairo_ps(file = paste0("w_ouf_kde_",animal@info$identity,".eps"),onefile = FALSE,fallback_resolution=600)
plot(animal,UD=UD2w,xlim=EXT$x,ylim=EXT$y)
title(paste0("weighted OUF AKDE-",animal@info$identity))
dev.off()
#print("Exportamos el shapefile del área de actividad calculada con el método M.OUF con pesos optimos")
#setwd("/home/milo/PCIC/Maestría/4toSemestre/ecol_mov/proyecto/output/akde/shp")
#writeShapefile(UD2w_gallo,paste0("akde_",gallo@info$identity,"_") , overwrite = TRUE)
setwd("/home/milo/PCIC/Maestría/4toSemestre/ecol_mov/proyecto/output/akde/raster")
print("Creamos el raster con IID AKDE")
animal_ud0 <-raster(UD0)
writeRaster(animal_ud0, filename=paste0("iid_kde_",animal@info$identity,".tif"), overwrite=TRUE)
print("Creamos el raster con UD del OUF AKDE")
animal_ud2 <-raster(UD2)
writeRaster(animal_ud2, filename=paste0("ouf_kde_",animal@info$identity,".tif"), overwrite=TRUE)
print("Creamos el raster con UD del weighted OUF AKDE")
animal_ud2w <-raster(UD2w)
writeRaster(animal_ud2w, filename=paste0("w_ouf_kde_",animal@info$identity,".tif"), overwrite=TRUE)
}
for (gallo in gallo_tel) {
build_akde(gallo)
}
rm(list=ls())
q()
