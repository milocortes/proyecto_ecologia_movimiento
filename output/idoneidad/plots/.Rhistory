lubridate::ydm_hms("2017-09-12 01:00:00")
dat <- gallopavo %>%
mutate(x = `location.long`, y = `location.lat`,
t = as.POSIXct(lubridate::ydm_hms(`timestamp`)), id = `individual.local.identifier`)
dat
gallopavo$timestamp
?lubridate::ydm_hms()
dat <- gallopavo %>%
mutate(x = `location.long`, y = `location.lat`,
t = lubridate::ydm_hms(`timestamp`), id = `individual.local.identifier`)
dat
gallopavo
dat
gallopavo$timestamp
lubridate::ydm_hms(gallopavo$timestamp)
gallopavo$timestamp
lubridate::ydm_hms(gallopavo$timestamp)
gallopavo$timestamp
lubridate::ydm_hms(gallopavo$timestamp)
gallopavo$timestamp
lubridate::ydm_hms(gallopavo$timestamp)
gallopavo$timestamp
lubridate::ydm_hms(gallopavo$timestamp)
lubridate::ydm_hms(as.character(gallopavo$timestamp))
lubridate::ydm_hms(gallopavo$timestamp,tz = "UTC")
lubridate::ydm_hms(gallopavo$timestamp,tz = "UTC",locale = Sys.getlocale("LC_TIME"))
lubridate::ydm_hms(gallopavo$timestamp,tz = "UTC",locale = Sys.getlocale("LC_TIME"),truncated = 0)
lubridate::ydm_hms(gallopavo$timestamp, tz = "America/Alabama")
lubridate::ydm_hms(gallopavo$timestamp, tz = "America")
lubridate::ydm_hms(gallopavo$timestamp, tz = "UTC")
gallopavo$timestamp
as.POSIXct(gallopavo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC")
# 4. Ahora abrimos los datos de movimiento de una manera un poco diferente a usando tidyverse.
dat <- gallopavo %>%
mutate(x = `location.long`, y = `location.lat`,
t = as.POSIXct(gallopavo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC"), id = `individual.local.identifier`)
dar
dat
colnames(dat)
head(da)
head(dat)
gallo_uno <- subset(dat, individual.local.identifier == "Sky_462")
gallo_uno
tr1 <- make_track(gallo_uno, x, y, t, id = id, crs = sp::CRS("+init=epsg:32716"))
tr1 <- make_track(gallo_uno, x, y, t, id = id, crs = sp::EPSG("+init=epsg:32716"))
tr1 <- make_track(gallo_uno, x, y, t, id = id, crs = sp::CRS("+init=epsg:32716"))
tr1
plot(tr1)
transform_coords(tr1, sp::CRS("+init=epsg:32716"))
tr1 <- make_track(gallo_uno, x, y, t, id = id, crs = sp::CRS("+init=epsg:32716") )
tr1
?make_track
gallo_uno %>%
make_track(lon,lat,crs = CRS('+init=epsg:32716')) %>%
transform_coords(CRS('+init=epsg:32716'))
gallo_uno %>%
make_track( x, y, t, id = id,crs = CRS('+init=epsg:32716')) %>%
transform_coords(CRS('+init=epsg:32716'))
amt::make_track(gallo_uno, x, y, t, id = id, crs = sp::CRS("+init=epsg:32716") )
dat <- gallopavo %>%
mutate(x = `location.long`, y = `location.lat`,
t = as.POSIXct(gallopavo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC"), id = `individual.local.identifier`)
dat
amt::make_track(gallo_uno)
gallo_uno
amt::make_track(gallo_uno,x=x,y=y,t=t)
amt::make_track(gallo_uno,.x=x,.y=y,.t=t)
amt::make_track(gallo_uno,.x=x,.y=y,.t=t,crs = sp::CRS("+init=epsg:32716"))
amt::make_track(gallo_uno,.x=x,.y=y,.t=t,crs = sp::CRS("+init=epsg:4326"))
gallo_uno$location.lat
amt::make_track(gallo_uno,.x=x,.y=y,.t=t,crs = sp::CRS("+init=epsg:4326"))
sf::st_set_crs(gallo_uno,"EPSG:4326")
gallopavo %>%   st_as_sf(coords = c("location.long", "location.lat"))
gallopavo %>%   tf::st_as_sf(coords = c("location.long", "location.lat"))
gallopavo %>%   sf::st_as_sf(coords = c("location.long", "location.lat"))
gallopavo <- gallopavo %>%   sf::st_as_sf(coords = c("location.long", "location.lat"))
st_is_longlat(gallopavo)
sf::st_is_longlat(gallopavo)
sf::st_set_crs(gallopavo, "EPSG:4326")
gallopavo_geo <-  sf::st_set_crs(gallopavo, "EPSG:4326")
View(gallopavo_geo)
sf::st_is_longlat(gallopavo_geo)
gallopavo_geo$time <- as.POSIXct(gallopavo_geo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC")
gallopavo_geo_uno <- subset(gallopavo_geo, individual.local.identifier == "Sky_462")
make_track(gallopavo_geo_uno)
make_track(gallopavo_geo_uno, .x = location.long , .y = location.lat)
gallopavo_geo_uno
gallopavo_geo_uno$geometry
gallopavo_geo_uno$geometry
gallopavo_geo_uno$geometry[1]
gallopavo_geo_uno$geometry
gallopavo_geo_uno$geometry
gallopavo_geo_uno$geometry[1]
gallopavo_geo_uno$geometry[1][1]
gallopavo_geo_uno$geometry[1]
make_track(gallopavo_geo_uno,crs = geometry)
gallopavo_geo$lon <- gallopavo$location.long
gallopavo_geo$lat <- gallopavo$location.lat
gallopavo_geo_uno <- subset(gallopavo_geo, individual.local.identifier == "Sky_462")
gallopavo_geo_uno
loginStored <- movebankLogin(username="milocg", password="%Move123")
gallopavo_all <- getMovebankData(study="Eastern Wild Turkey_Margadant", login=loginStored)
gallopavo_all
# Get track GPS data
gallopavo <- getMovebankLocationData(study="Eastern Wild Turkey_Margadant" , sensorID="GPS", login=loginStored,removeDuplicatedTimestamps=TRUE)
# Remove NAN
gallopavo <- gallopavo %>% drop_na()
Viwe(gallopavo)
View(gallopavo)
gallopavo_geo <- gallopavo %>%   sf::st_as_sf(coords = c("location.long", "location.lat"))
gallopavo_geo <-  sf::st_set_crs(gallopavo, "EPSG:4326")
gallopavo_geo <-  sf::st_set_crs(gallopavo_geo, "EPSG:4326")
gallopavo_geo$time <- as.POSIXct(gallopavo_geo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC")
gallopavo_geo$lon <- gallopavo$location.long
gallopavo_geo$lat <- gallopavo$location.lat
gallopavo_geo_uno <- subset(gallopavo_geo, individual.local.identifier == "Sky_462")
make_track(gallopavo_geo_uno, .x = lon, .y=lat, .t=time, id = id, crs = geometry )
View(gallopavo_geo)
make_track(gallopavo_geo_uno, .x = lon, .y=lat, .t=time)
make_track(gallopavo_geo_uno, .x = lon, .y=lat, .t=time,.id =individual.local.identifier )
make_track(gallopavo_geo_uno, .x = lon, .y=lat, .t=time,.id =individual.local.identifier,crs = geometry )
?make_track()
make_track(gallopavo_geo_uno, .x = lon, .y=lat, .t=time,.id =individual.local.identifier )
str <- make_track(gallopavo_geo_uno, .x = lon, .y=lat, .t=time,.id =individual.local.identifier,crs = sp::CRS("+init=epsg:32616") )
str <- make_track(gallopavo_geo_uno, .x = lon, .y=lat, .t=time,.id =individual.local.identifier,.crs = sp::CRS("+init=epsg:32616") )
str <- make_track(gallopavo_geo_uno, .x = lon, .y=lat, .t=time,.id =individual.local.identifier)
str %>% amt::transform_coords(sp::CRS("+init=epsg:32616") )
str
?transform_coords()
transform_coords(tr1,crs_to = "32616")
transform_coords(tr1,crs_to = 32616)
# 4. Ahora abrimos los datos de movimiento de una manera un poco diferente a usando tidyverse.
dat <- gallopavo %>%
mutate(x = `location.long`, y = `location.lat`,
t = as.POSIXct(gallopavo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC"), id = `individual.local.identifier`)
# 4.1 Exploramos lo datos con un solo indiviudo
gallo_uno <- subset(dat, individual.local.identifier == "Sky_462")
gallo_uno
# 4.2 Creamos el objeto track que puede leer amt
tr1 <- make_track(gallo_uno, x, y, t, id = id )
tr1
tr1 <- transform_coords(tr1,crs_to = 32616)
tr1
gallopavo_geo <- gallopavo %>%   sf::st_as_sf(coords = c("location.long", "location.lat"))
gallopavo_geo <-  sf::st_set_crs(gallopavo_geo, "EPSG:4326")
gallopavo_geo$time <- as.POSIXct(gallopavo_geo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC")
gallopavo_geo$lon <- gallopavo$location.long
gallopavo_geo$lat <- gallopavo$location.lat
gallopavo_geo_uno <- subset(gallopavo_geo, individual.local.identifier == "Sky_462")
str <- make_track(gallopavo_geo_uno, .x = lon, .y=lat, .t=time,.id =individual.local.identifier)
str
tr1 <- transform_coords(tr1,crs_to = 32616)
gallopavo_geo <- gallopavo %>%   sf::st_as_sf(coords = c("location.long", "location.lat"))
gallopavo_geo <-  sf::st_set_crs(gallopavo_geo, "EPSG:4326")
gallopavo_geo$time <- as.POSIXct(gallopavo_geo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC")
gallopavo_geo$lon <- gallopavo$location.long
gallopavo_geo$lat <- gallopavo$location.lat
gallopavo_geo_uno <- subset(gallopavo_geo, individual.local.identifier == "Sky_462")
tr1 <- make_track(gallopavo_geo_uno, .x = lon, .y=lat, .t=time,.id =individual.local.identifier)
tr1
tr1 <- transform_coords(tr1,crs_to = 32616)
gallopavo_geo <- gallopavo %>%   sf::st_as_sf(coords = c("location.long", "location.lat"))
gallopavo_geo <-  sf::st_set_crs(gallopavo_geo, "EPSG:4326")
gallopavo_geo$time <- as.POSIXct(gallopavo_geo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC")
gallopavo_geo$lon <- gallopavo$location.long
gallopavo_geo$lat <- gallopavo$location.lat
gallopavo_geo_uno <- subset(gallopavo_geo, individual.local.identifier == "Sky_462")
tr1 <- make_track(gallopavo_geo_uno, .x = lon, .y=lat, .t=time,.id =individual.local.identifier,crs = 4326)
tr1
tr1 <- transform_coords(tr1,crs_to = 32616)
tr1
dat <- gallopavo %>%
mutate(x = `location.long`, y = `location.lat`,
t = as.POSIXct(gallopavo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC"), id = `individual.local.identifier`)
# 4.1 Exploramos lo datos con un solo indiviudo
gallo_uno <- subset(dat, individual.local.identifier == "Sky_462")
gallo_uno
tr1 <- make_track(gallopavo_uno, .x = lon, .y=lat, .t=time,.id =individual.local.identifier,crs = 4326)
tr1 <- make_track(gallo_uno, .x = lon, .y=lat, .t=time,.id =individual.local.identifier,crs = 4326)
tr1 <- make_track(gallo_uno, .x = lon, .y=lat, .t=t,.id =id,crs = 4326)
tr1 <- make_track(gallo_uno, .x = x, .y=y, .t=t,.id =id,crs = 4326)
tr1 <- transform_coords(tr1,crs_to = 32616)
r1
tr1
plot(elevation)
hr_4 <- hr_kde(tr1, level = 0.95) %>% hr_isopleths() %>%
sf::st_buffer(dist =3000) # incluimos un buffer de 3 km
hr_4
summary(hr_4)
r6 <- random_points(hr_4, n = 45190, presence = tr1)
plot(r6)
r6
summary(r6)
rsf1 <- r6 %>%
extract_covariates(wetness, where = "end") %>%
extract_covariates(elevation, where = "end") %>%
extract_covariates(temperature, where = "end") %>%
extract_covariates(evi, where = "end")
rsf1
summary(rsf1)
wetness <- raster("wetness_gallopavo.tif")
names(wetness) <- "wetness_"
################ Elevacion
elevation <- raster("elv_gallopavo.tif")
names(elevation) <- "elevation_"
################# Temperatura
temperature <- raster("lst_gallopavo.tif")
names(temperature) <- "temperature_"
################# EVI
evi <- raster("evi_gallopavo.tif")
names(evi) <- "evi_"
plot(elevation)
rsf1 <- r6 %>%
extract_covariates(wetness, where = "end") %>%
extract_covariates(elevation, where = "end") %>%
extract_covariates(temperature, where = "end") %>%
extract_covariates(evi, where = "end")
rsf1
################ Indice de humedad
wetness <- raster("wetness_gallopavo.tif")
names(wetness) <- "wetness_"
################ Elevacion
elevation <- raster("elv_gallopavo.tif")
names(elevation) <- "elevation_"
################# Temperatura
temperature <- raster("lst_gallopavo.tif")
names(temperature) <- "temperature_"
################# EVI
evi <- raster("evi_gallopavo.tif")
names(evi) <- "evi_"
# la celda donde est� cada una de las localizaciones.
rsf1 <- r6 %>%
extract_covariates(wetness, where = "end") %>%
extract_covariates(elevation, where = "end") %>%
extract_covariates(temperature, where = "end") %>%
extract_covariates(evi, where = "end")
rsf1
summary(rsf1)
model_1 <- rsf1 %>% fit_rsf(case_ ~ wetness_ + elevation + temperature + evi)
model_1 <- rsf1 %>% fit_rsf(case_ ~ wetness_ + elevation_+ temperature_ + evi_)
summary(model_1)
AIC(model_1$model)
model_1 <- rsf1 %>% fit_rsf(case_ ~ wetness_ )
summary(model_1)
AIC(model_1$model)
model_1 <- rsf1 %>% fit_rsf(case_ ~ wetness_ + elevation_+ temperature_ + evi_)
summary(model_1)
AIC(model_1$model)
model_1 <- rsf1 %>% fit_rsf(case_ ~ wetness_ + elevation_+ temperature_ )
summary(model_1)
AIC(model_1$model)
model_1 <- rsf1 %>% fit_rsf(case_ ~ wetness_ + elevation_)
summary(model_1)
AIC(model_1$model)
model_1 <- rsf1 %>% fit_rsf(case_ ~ wetness_ + elevation_+evi_)
summary(model_1)
AIC(model_1$model)
model_1 <- rsf1 %>% fit_rsf(case_ ~ wetness_ + elevation_)
summary(model_1)
AIC(model_1$model)
?fit_rsf
dat$treatment <- "nt_gallo"
dat <- gallopavo %>%
mutate(x = `location.long`, y = `location.lat`,
t = as.POSIXct(gallopavo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC"), id = `treatment`)
gallopavot$treatment <- "nt_gallo"
dat <- gallopavo %>%
mutate(x = `location.long`, y = `location.lat`,
t = as.POSIXct(gallopavo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC"), id = `treatment`)
gallopavo$treatment <- "nt_gallo"
dat <- gallopavo %>%
mutate(x = `location.long`, y = `location.lat`,
t = as.POSIXct(gallopavo$timestamp, format= "%Y-%m-%d %H:%M:S", tz="UTC"), id = `treatment`)
tr1 <- make_track(dat, .x = x, .y=y, .t=t,.id =id,crs = 4326)
tr1 <- transform_coords(tr1,crs_to = 32616)
plot(tr1)
training <- tr1 %>%
sample_frac(0.1, replace = F)
training
testing <- anti_join(tr1, training)
testing
hr_1 <- hr_mcp(testing, level = 1) %>% hr_isopleths() %>%
sf::st_buffer(dist =5000) # incluimos un buffer de 5 km
# Ahora generamos puntos al azar 10 veces m�s de los puntos de las localizaciones:
r1 <- random_points(hr_1, n = 190210, presence = testing)
plot(r1)
rsf1 <- r1 %>%
extract_covariates(wetness, where = "end") %>%
extract_covariates(elevation, where = "end") %>%
extract_covariates(temperature, where = "end") %>%
extract_covariates(evi, where = "end")
rsf1
attach(rsf1)
mata<-cbind(forest_, regrowth_, mosaic_, open_, palm_, water_ , wetness_, dist_forest_, dist_road_, dist_plant_,
dist_wat_, elevation_, slope_, nightlight_)
mata <- data.frame(mata)
# Matriz de correlaci�n
corrmatp <- cor(mata, method="pearson")
corrmatp
attach(rsf1)
mata<-cbind(wetness_,elevation_,temperature_,evi_)
mata <- data.frame(mata)
# Matriz de correlaci�n
corrmatp <- cor(mata, method="pearson")
corrmatp
mata<-cbind(wetness,elevation,temperature,evi)
mata
attach(rsf1)
mata<-cbind(wetness,elevation,temperature,evi)
mata <- data.frame(mata)
# Matriz de correlaci�n
corrmatp <- cor(mata, method="pearson")
corrmatp
install.packages("MuMIn")
library(MuMIn)
# Ahora promedio los modelos:
models1<- model.sel (model_1$model,model_2$model,model_3$model,model_4$model,model_5$model,
model_6$model,model_7$model,model_8$model,model_9$model,model_10$model,model_11$model,model_12$model,model_13model,model_14$model,model_15$model)
models1
model_1 <- rsf1 %>% fit_rsf(case_ ~ wetness_)
model_2 <- rsf1 %>% fit_rsf(case_ ~ elevation_)
model_3 <- rsf1 %>% fit_rsf(case_ ~ temperature_)
model_4 <- rsf1 %>% fit_rsf(case_ ~ evi_)
model_5 <- rsf1 %>% fit_rsf(case_ ~ wetness_+ elevation_)
model_6 <- rsf1 %>% fit_rsf(case_ ~ wetness_+ temperature_)
model_7 <- rsf1 %>% fit_rsf(case_ ~ wetness_+ evi_)
model_8 <- rsf1 %>% fit_rsf(case_ ~ elevation_+ temperature_)
model_9 <- rsf1 %>% fit_rsf(case_ ~ elevation_+ evi_)
model_10 <- rsf1 %>% fit_rsf(case_ ~ temperature_+ evi_)
model_11 <- rsf1 %>% fit_rsf(case_ ~ wetness_+ elevation_+ temperature_)
model_12 <- rsf1 %>% fit_rsf(case_ ~ wetness_+ elevation_+ evi_)
model_13 <- rsf1 %>% fit_rsf(case_ ~ wetness_+ temperature_+ evi_)
model_14 <- rsf1 %>% fit_rsf(case_ ~ elevation_+ temperature_+ evi_)
model_15 <- rsf1 %>% fit_rsf(case_ ~ wetness_+ elevation_+ temperature_+ evi_)
library(MuMIn)
# Ahora promedio los modelos:
models1<- model.sel (model_1$model,model_2$model,model_3$model,model_4$model,model_5$model,
model_6$model,model_7$model,model_8$model,model_9$model,model_10$model,model_11$model,model_12$model,model_13model,model_14$model,model_15$model)
models1
models1<- model.sel (model_1$model,model_2$model,model_3$model,model_4$model,model_5$model,
model_6$model,model_7$model,model_8$model,model_9$model,model_10$model,model_11$model,model_12$model,model_13$model,model_14$model,model_15$model)
models1
model_15
summary(model_15)
wetness
wetness * 0.2
exp((wetness * 14.0595996) + (elevation * -0.0021378) + (temperature * -1.7989168) + (evi * 35.2049150) )
1/exp((wetness * 14.0595996) + (elevation * -0.0021378) + (temperature * -1.7989168) + (evi * 35.2049150) )
exp((wetness * 14.0595996) + (elevation * -0.0021378) + (temperature * -1.7989168) + (evi * 35.2049150) )
exp((wetness * 14.0595996) + (elevation * -0.0021378) + (temperature * -1.7989168) + (evi * 35.2049150) ) /(1 +exp((wetness * 14.0595996) + (elevation * -0.0021378) + (temperature * -1.7989168) + (evi * 35.2049150) ))
wetness
wetness*0.5
wetness$wetness_
wetness$wetness_$wetness_
wetness
library(ggeffects)
library(ggplot2)
install.packages("ggeffects")
library(ggeffects)
library(ggplot2)
g1 <- ggpredict(model_15$model, terms = "regrowth_[all]")
plot(g1)
g1 <- ggpredict(model_15$model, terms = "wetness_[all]")
plot(g1)
model_15$model
g1 <- ggpredict(model_15$model, terms = "wetness_")
g1 <- ggpredict(model_15$model, terms = "elevation_")
g1 <- ggpredict(model_15$model, terms = "elevation")
g1 <- ggpredict(model_15$model, terms = "elevation_")
g1 <- ggpredict(model_15$model, terms = "elevation_[all]")
model_15 <- rsf1 %>% fit_rsf(as.factor(case_) ~ wetness_+ elevation_+ temperature_+ evi_, model =TRUE)
g1 <- ggpredict(model_15$model, terms = "wetness_[all]")
plot(g1)
ggplot(g1, aes(x, predicted)) +
geom_line (colour="tomato4", size = 1, linetype= "longdash") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2, linetype = "dotted", fill = "tomato1") +
theme_classic() +
ggtitle("Percentage of regrowth and new plantations") +
theme(plot.title = element_text(size = 16, face = "bold"), axis.text = element_text( size=15), axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15), axis.title.x = element_blank(),
axis.title.y = element_blank())
###
g1 <- ggpredict(model_15$model, terms = "wetness_[all]")
plot(g1)
#
ggplot(g1, aes(x, predicted)) +
geom_line (colour="tomato4", size = 1, linetype= "longdash") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2, linetype = "dotted", fill = "tomato1") +
theme_classic() +
ggtitle("Tasseled Cap Wetness (TCW)") +
theme(plot.title = element_text(size = 16, face = "bold"), axis.text = element_text( size=15), axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15), axis.title.x = element_blank(),
axis.title.y = element_blank())
g2 <- ggpredict(model_15$model, terms = "elevation_[all]")
plot(g2)
#
ggplot(g2, aes(x, predicted)) +
geom_line (colour="tomato4", size = 1, linetype= "longdash") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2, linetype = "dotted", fill = "tomato1") +
theme_classic() +
ggtitle("USGS ground elevation (ELV)") +
theme(plot.title = element_text(size = 16, face = "bold"), axis.text = element_text( size=15), axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15), axis.title.x = element_blank(),
axis.title.y = element_blank())
g3 <- ggpredict(model_15$model, terms = "temperature_[all]")
#
ggplot(g3, aes(x, predicted)) +
geom_line (colour="tomato4", size = 1, linetype= "longdash") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2, linetype = "dotted", fill = "tomato1") +
theme_classic() +
ggtitle("MODIS land surface temperature (LST)") +
theme(plot.title = element_text(size = 16, face = "bold"), axis.text = element_text( size=15), axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15), axis.title.x = element_blank(),
axis.title.y = element_blank())
###
g4 <- ggpredict(model_15$model, terms = "evi_[all]")
#
ggplot(g4, aes(x, predicted)) +
geom_line (colour="tomato4", size = 1, linetype= "longdash") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2, linetype = "dotted", fill = "tomato1") +
theme_classic() +
ggtitle("Enhanced Vegetation Index (EVI) ") +
theme(plot.title = element_text(size = 16, face = "bold"), axis.text = element_text( size=15), axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15), axis.title.x = element_blank(),
axis.title.y = element_blank())
# 9.2 Ahora gr�ficamos el efecto marginal de cada una de las covariables
g1 <- ggpredict(model_15$model, terms = "wetness_[all]")
plot(g1)
#
ggplot(g1, aes(x, predicted)) +
geom_line (colour="tomato4", size = 1, linetype= "longdash") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2, linetype = "dotted", fill = "tomato1") +
theme_classic() +
ggtitle("Tasseled Cap Wetness (TCW)") +
theme(plot.title = element_text(size = 16, face = "bold"), axis.text = element_text( size=15), axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15), axis.title.x = element_blank(),
axis.title.y = element_blank())
getwd("/home/milo/PCIC/Maestría/4toSemestre/ecol_mov/proyecto/output/akde/plots")
setwd("/home/milo/PCIC/Maestría/4toSemestre/ecol_mov/proyecto/output/akde/plots")
g1 <- ggpredict(model_15$model, terms = "wetness_[all]")
#
g1_p <- ggplot(g1, aes(x, predicted)) +
geom_line (colour="tomato4", size = 1, linetype= "longdash") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2, linetype = "dotted", fill = "tomato1") +
theme_classic() +
ggtitle("Tasseled Cap Wetness (TCW)") +
theme(plot.title = element_text(size = 16, face = "bold"), axis.text = element_text( size=15), axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15), axis.title.x = element_blank(),
axis.title.y = element_blank())
ggsave(g1_p, file="m_effects_wetness.eps", device="eps")
setwd("/home/milo/PCIC/Maestría/4toSemestre/ecol_mov/proyecto/output/idoneidad/plots")
g1 <- ggpredict(model_15$model, terms = "wetness_[all]")
#
g1_p <- ggplot(g1, aes(x, predicted)) +
geom_line (colour="tomato4", size = 1, linetype= "longdash") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2, linetype = "dotted", fill = "tomato1") +
theme_classic() +
ggtitle("Tasseled Cap Wetness (TCW)") +
theme(plot.title = element_text(size = 16, face = "bold"), axis.text = element_text( size=15), axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15), axis.title.x = element_blank(),
axis.title.y = element_blank())
ggsave(g1_p, file="m_effects_wetness.eps", device=cairo_ps)
# 9.2 Ahora gr�ficamos el efecto marginal de cada una de las covariables
g1 <- ggpredict(model_15$model, terms = "wetness_[all]")
#
g1_p <- ggplot(g1, aes(x, predicted)) +
geom_line (colour="tomato4", size = 1, linetype= "longdash") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2, linetype = "dotted", fill = "tomato1") +
theme_classic() +
ggtitle("Tasseled Cap Wetness (TCW)") +
theme(plot.title = element_text(size = 16, face = "bold"), axis.text = element_text( size=15), axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15), axis.title.x = element_blank(),
axis.title.y = element_blank())
ggsave(g1_p, file="m_effects_wetness.eps", device=cairo_ps)
###
g2 <- ggpredict(model_15$model, terms = "elevation_[all]")
#
g2_p <- ggplot(g2, aes(x, predicted)) +
geom_line (colour="tomato4", size = 1, linetype= "longdash") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2, linetype = "dotted", fill = "tomato1") +
theme_classic() +
ggtitle("USGS ground elevation (ELV)") +
theme(plot.title = element_text(size = 16, face = "bold"), axis.text = element_text( size=15), axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15), axis.title.x = element_blank(),
axis.title.y = element_blank())
ggsave(g2_p, file="m_effects_elevation.eps", device=cairo_ps)
###
g3 <- ggpredict(model_15$model, terms = "temperature_[all]")
#
g3_p <- ggplot(g3, aes(x, predicted)) +
geom_line (colour="tomato4", size = 1, linetype= "longdash") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2, linetype = "dotted", fill = "tomato1") +
theme_classic() +
ggtitle("MODIS land surface temperature (LST)") +
theme(plot.title = element_text(size = 16, face = "bold"), axis.text = element_text( size=15), axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15), axis.title.x = element_blank(),
axis.title.y = element_blank())
ggsave(g3_p, file="m_effects_temperature.eps", device=cairo_ps)
###
g4 <- ggpredict(model_15$model, terms = "evi_[all]")
#
g4_p <- ggplot(g4, aes(x, predicted)) +
geom_line (colour="tomato4", size = 1, linetype= "longdash") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2, linetype = "dotted", fill = "tomato1") +
theme_classic() +
ggtitle("Enhanced Vegetation Index (EVI) ") +
theme(plot.title = element_text(size = 16, face = "bold"), axis.text = element_text( size=15), axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15), axis.title.x = element_blank(),
axis.title.y = element_blank())
ggsave(g4_p, file="m_effects_evi.eps", device=cairo_ps)
rm(list=ls())
q()
